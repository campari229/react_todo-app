{"version":3,"sources":["components/Header/Header.js","components/TodoList/TodoList.js","components/Shape/Shape.js","components/Footer/Footer.js","App.js","index.js"],"names":["Header","state","tempoToto","tempoId","addTempoTodo","event","setState","target","value","todoMaker","text","id","input","keyCode","props","addTodo","prevState","className","onChange","this","onKeyDown","placeholder","React","Component","TodoList","PropTypes","arrayOf","shape","todo","string","isRequired","isDone","bool","number","editText","editStart","currentTarget","children","innerText","addEditText","editEnd","edit","parentElement","todos","map","onDoubleClick","key","type","checked","readOnly","onClick","todoCheck","htmlFor","remove","Footer","useFilter","clear","filter","length","App","todosToShow","todoId","trim","item","removeTodo","todoEdit","editedTodo","tempoTodos","clearCompleted","makeAllChecked","every","shownTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.132ed6f7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport class Header extends React.Component {\n  state = {\n    tempoToto: '',\n    tempoId: 1,\n  }\n\n  addTempoTodo = (event) => {\n    this.setState({\n      tempoToto: event.target.value,\n    });\n  }\n\n  todoMaker = (event) => {\n    const text = this.state.tempoToto;\n    const id = this.state.tempoId + 1;\n    const input = event.target;\n\n    if (event.keyCode === 13) {\n      this.props.addTodo(text, id);\n\n      this.setState(prevState => ({\n        tempoId: prevState.tempoId + 1,\n        tempoToto: '',\n      }));\n\n      input.value = '';\n    }\n  }\n\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <input\n          onChange={this.addTempoTodo}\n          onKeyDown={this.todoMaker}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { todosShape } from '../Shape/Shape';\n\nexport class TodoList extends React.Component {\n  state = {\n    editText: '',\n  }\n\n  editStart = (event) => {\n    const todo = event.currentTarget;\n    const input = event.currentTarget.children[1];\n\n    input.value = event.target.innerText;\n\n    if (!todo.className) {\n      todo.className = 'editing';\n    }\n  }\n\n  addEditText = (event) => {\n    this.setState({\n      editText: event.target.value,\n    });\n  }\n\n  editEnd = id => (event) => {\n    const input = event.target;\n\n    if (event.keyCode === 13) {\n      if (this.state.editText) {\n        this.props.edit(this.state.editText, id);\n        input.parentElement.className = '';\n      } else {\n        input.parentElement.className = '';\n      }\n    }\n  }\n\n  render() {\n    return (\n      <ul className=\"todo-list\">\n        {this.props.todos.map(todo => (\n          <li\n            className={todo.isDone ? 'completed' : ''}\n            onDoubleClick={this.editStart}\n            key={todo.id}\n          >\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                checked={todo.isDone}\n                readOnly\n                className=\"toggle\"\n                id={todo.id}\n                onClick={() => this.props.todoCheck(todo.id)}\n              />\n              <span htmlFor={todo.id}>{todo.todo}</span>\n              <button\n                type=\"button\"\n                className=\"destroy\"\n                onClick={() => this.props.remove(todo.id)}\n              />\n            </div>\n            <input\n              type=\"text\"\n              className=\"edit\"\n              onChange={this.addEditText}\n              onKeyDown={this.editEnd(todo.id)}\n            />\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todoCheck: PropTypes.func.isRequired,\n  remove: PropTypes.func.isRequired,\n  edit: PropTypes.func.isRequired,\n  todos: todosShape.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const todosShape = PropTypes.arrayOf(\n  PropTypes.shape({\n    todo: PropTypes.string.isRequired,\n    isDone: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n  }),\n).isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { todosShape } from '../Shape/Shape';\n\nexport class Footer extends React.Component {\n  state = {\n\n  }\n\n  render() {\n    const { todos, useFilter, clear } = this.props;\n\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${todos.filter(todo => todo.isDone === false).length} items left`}\n        </span>\n        <ul className=\"filters\">\n          <li>\n            <button\n              onClick={() => useFilter('all')}\n              type=\"button\"\n            >\n              All\n            </button>\n          </li>\n          <li>\n            <button\n              type=\"button\"\n              onClick={() => useFilter('inProces')}\n            >\n              Active\n            </button>\n          </li>\n          <li>\n            <button\n              onClick={() => useFilter('completed')}\n              type=\"button\"\n            >\n              Completed\n            </button>\n          </li>\n        </ul>\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={clear}\n        >\n          Clear completed\n        </button>\n      </footer>\n    );\n  }\n}\n\nFooter.propTypes = {\n  todos: todosShape.isRequired,\n  useFilter: PropTypes.func.isRequired,\n  clear: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport { Header } from './components/Header/Header';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { Footer } from './components/Footer/Footer';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    todosToShow: 'all',\n  }\n\n  addTodo = (text, todoId) => {\n    if (text.trim().length) {\n      this.setState(prevState => ({\n        todos: [\n          ...prevState.todos,\n          {\n            todo: text,\n            isDone: false,\n            id: todoId,\n          },\n        ],\n      }));\n    }\n  }\n\n  todoCheck = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((item) => {\n        if (item.id === id) {\n          return {\n            ...item,\n            isDone: !item.isDone,\n          };\n        }\n\n        return item;\n      }),\n    }));\n  }\n\n  removeTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(item => item.id !== id),\n    }));\n  }\n\n  todoEdit = (editedTodo, id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((item) => {\n        if (item.id === id) {\n          return {\n            ...item,\n            todo: editedTodo,\n          };\n        }\n\n        return item;\n      }),\n    }));\n  }\n\n  useFilter = (tempoTodos) => {\n    this.setState({\n      todos: tempoTodos,\n    });\n  }\n\n  useFilter = (filter) => {\n    this.setState({\n      todosToShow: filter,\n    });\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.isDone === false),\n    }));\n  }\n\n  makeAllChecked = () => {\n    if (this.state.todos.every(todo => todo.isDone === true)) {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          isDone: false,\n        })),\n      }));\n    } else {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          isDone: true,\n        })),\n      }));\n    }\n  }\n\n  todosToShow(shownTodos) {\n    if (shownTodos === 'all') {\n      return this.state.todos;\n    }\n\n    if (shownTodos === 'completed') {\n      return this.state.todos.filter(todo => todo.isDone === true);\n    }\n\n    if (shownTodos === 'inProces') {\n      return this.state.todos.filter(todo => todo.isDone === false);\n    }\n\n    return null;\n  }\n\n  render() {\n    const { todos } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <Header addTodo={this.addTodo} />\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onClick={this.makeAllChecked}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          {todos.length\n            ? (\n              <TodoList\n                todos={this.todosToShow(this.state.todosToShow)}\n                todoCheck={this.todoCheck}\n                remove={this.removeTodo}\n                edit={this.todoEdit}\n              />\n            )\n            : <></>\n          }\n        </section>\n        {todos.length\n          ? (\n            <Footer\n              todos={this.state.todos}\n              useFilter={this.useFilter}\n              clear={this.clearCompleted}\n            />\n          )\n          : <></>\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}